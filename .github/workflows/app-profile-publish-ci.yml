name: Navigator App Profile Publish CI

on:
    # Trigger on pushes to app/* branches (automatic profile detection)
    push:
        branches:
            - 'app/*'
        tags: ['v*']

    # Manual workflow dispatch (manual profile selection)
    workflow_dispatch:
        inputs:
            profiles:
                description: 'Comma-separated list of profiles to build (e.g., gigmodal,fleetbase)'
                required: true
                default: 'fleetbase'
            deploy:
                description: 'Deploy to app stores'
                required: false
                default: 'false'
                type: boolean

env:
    AWS_REGION: ap-southeast-1
    S3_BUCKET: flb-navigator-app-profiles

jobs:
    prepare-matrix:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
            is-manual: ${{ steps.set-matrix.outputs.is-manual }}
        steps:
            - name: Set up build matrix
              id: set-matrix
              run: |
                  if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                      # Manual dispatch - use input profiles
                      PROFILES="${{ github.event.inputs.profiles }}"
                      IS_MANUAL="true"
                      echo "Manual workflow dispatch with profiles: $PROFILES"
                  else
                      # Branch push - extract profile from branch name
                      BRANCH_NAME="${{ github.ref_name }}"
                      echo "Branch name: $BRANCH_NAME"
                      
                      if [[ "$BRANCH_NAME" == app/* ]]; then
                          # Extract profile from branch name (app/gigmodal -> gigmodal)
                          PROFILE=$(echo "$BRANCH_NAME" | sed 's|^app/||')
                          PROFILES="$PROFILE"
                          IS_MANUAL="false"
                          echo "Detected profile from branch: $PROFILE"
                      else
                          echo "Branch does not match app/* pattern, skipping"
                          exit 0
                      fi
                  fi

                  # Convert comma-separated string to JSON array
                  MATRIX=$(echo "$PROFILES" | jq -R -s -c 'split(",") | map(select(length > 0))')
                  echo "matrix={\"profile\":$MATRIX}" >> $GITHUB_OUTPUT
                  echo "is-manual=$IS_MANUAL" >> $GITHUB_OUTPUT
                  echo "Final matrix: $MATRIX"

    build-and-deploy:
        needs: prepare-matrix
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest]
                profile: ${{ fromJson(needs.prepare-matrix.outputs.matrix.profile) }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Download profile configuration
              run: |
                  echo "üì• Downloading profile: ${{ matrix.profile }}"

                  # Create profile directory
                  mkdir -p profile-temp

                  # Download profile files from S3
                  echo "Downloading .env file..."
                  aws s3 cp s3://${{ env.S3_BUCKET }}/${{ matrix.profile }}/.env profile-temp/.env

                  echo "Downloading app assets..."
                  aws s3 cp s3://${{ env.S3_BUCKET }}/${{ matrix.profile }}/app-icon.png profile-temp/app-icon.png
                  aws s3 cp s3://${{ env.S3_BUCKET }}/${{ matrix.profile }}/splash-screen.png profile-temp/splash-screen.png

                  # Download platform-specific files
                  if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
                      echo "Downloading Android google-services.json..."
                      aws s3 cp s3://${{ env.S3_BUCKET }}/${{ matrix.profile }}/google-services.json profile-temp/google-services.json
                  fi

                  if [ "${{ matrix.os }}" = "macos-latest" ]; then
                      echo "Downloading iOS GoogleService-Info.plist..."
                      aws s3 cp s3://${{ env.S3_BUCKET }}/${{ matrix.profile }}/GoogleService-Info.plist profile-temp/GoogleService-Info.plist || echo "GoogleService-Info.plist not found, skipping..."
                  fi

                  echo "‚úÖ Profile download completed"

            - name: Apply profile configuration
              run: |
                  echo "üîß Applying profile configuration for: ${{ matrix.profile }}"

                  # Copy files to their target locations
                  cp profile-temp/.env .env

                  # Ensure assets directory exists
                  mkdir -p assets
                  cp profile-temp/app-icon.png assets/app-icon.png
                  cp profile-temp/splash-screen.png assets/splash-screen.png

                  # Platform-specific file placement
                  if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ -f profile-temp/google-services.json ]; then
                      mkdir -p android/app
                      cp profile-temp/google-services.json android/app/google-services.json
                      echo "‚úÖ Android google-services.json applied"
                  fi

                  if [ "${{ matrix.os }}" = "macos-latest" ] && [ -f profile-temp/GoogleService-Info.plist ]; then
                      mkdir -p ios/NavigatorApp
                      cp profile-temp/GoogleService-Info.plist ios/NavigatorApp/GoogleService-Info.plist
                      echo "‚úÖ iOS GoogleService-Info.plist applied"
                  fi

                  echo "‚úÖ Profile configuration applied"

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18'
                  cache: 'yarn'

            - name: Enable Corepack
              run: corepack enable

            - name: Activate Yarn 3.6.4
              run: corepack prepare yarn@3.6.4 --activate

            - name: Install dependencies
              run: yarn install --immutable

            - name: Generate app icon and splash screen
              run: |
                  echo "üé® Generating app icon and splash screen..."

                  # Check if commands exist before running
                  if yarn run --silent generate:app-icon --help >/dev/null 2>&1; then
                      yarn generate:app-icon
                      echo "‚úÖ App icon generated"
                  else
                      echo "‚ö†Ô∏è  generate:app-icon command not found, skipping..."
                  fi

                  if yarn run --silent generate:launch-screen --help >/dev/null 2>&1; then
                      yarn generate:launch-screen
                      echo "‚úÖ Launch screen generated"
                  else
                      echo "‚ö†Ô∏è  generate:launch-screen command not found, skipping..."
                  fi

            # Android build steps
            - name: Set up JDK 21 (Android)
              if: matrix.os == 'ubuntu-latest'
              uses: actions/setup-java@v4
              with:
                  distribution: 'temurin'
                  java-version: '21'

            - name: Cache Gradle Dependencies (Android)
              if: matrix.os == 'ubuntu-latest'
              uses: actions/cache@v4
              with:
                  path: ~/.gradle/caches
                  key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-caches-

            - name: Build Android Release APK
              if: matrix.os == 'ubuntu-latest'
              run: |
                  echo "ü§ñ Building Android APK for profile: ${{ matrix.profile }}"
                  cd android
                  chmod +x ./gradlew

                  # Fix: Create gradle.properties to override problematic JVM settings
                  echo "org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m" > gradle.properties
                  echo "org.gradle.daemon=false" >> gradle.properties
                  echo "org.gradle.parallel=false" >> gradle.properties

                  ./gradlew clean assembleRelease --no-daemon --stacktrace

            # iOS build steps
            - name: Setup Xcode (iOS)
              if: matrix.os == 'macos-latest'
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: latest-stable

            - name: Cache CocoaPods (iOS)
              if: matrix.os == 'macos-latest'
              uses: actions/cache@v4
              with:
                  path: |
                      ios/Pods
                      ~/Library/Caches/CocoaPods
                      ~/.cocoapods
                  key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-pods-

            - name: Install CocoaPods (iOS)
              if: matrix.os == 'macos-latest'
              run: |
                  sudo gem install cocoapods
                  cd ios && pod install --repo-update

            - name: Build iOS Release Archive
              if: matrix.os == 'macos-latest'
              run: |
                  echo "üçé Building iOS archive for profile: ${{ matrix.profile }}"
                  cd ios

                  # Fix: Use generic destination that works in CI
                  xcodebuild -workspace NavigatorApp.xcworkspace \
                    -scheme NavigatorApp \
                    -configuration Release \
                    -archivePath build/NavigatorApp-${{ matrix.profile }}.xcarchive \
                    -allowProvisioningUpdates \
                    archive

            - name: Export iOS IPA
              if: matrix.os == 'macos-latest'
              run: |
                  echo "üì¶ Exporting iOS IPA for profile: ${{ matrix.profile }}"
                  cd ios

                  # Create a basic export options plist if it doesn't exist
                  if [ ! -f ExportOptions.plist ]; then
                      cat > ExportOptions.plist << EOF
                  <?xml version="1.0" encoding="UTF-8"?>
                  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                  <plist version="1.0">
                  <dict>
                      <key>method</key>
                      <string>app-store</string>
                      <key>uploadBitcode</key>
                      <false/>
                      <key>uploadSymbols</key>
                      <true/>
                      <key>compileBitcode</key>
                      <false/>
                  </dict>
                  </plist>
                  EOF
                  fi

                  xcodebuild -exportArchive \
                    -archivePath build/NavigatorApp-${{ matrix.profile }}.xcarchive \
                    -exportPath build/ipa \
                    -exportOptionsPlist ExportOptions.plist

            # Upload artifacts
            - name: Upload Android APK
              if: matrix.os == 'ubuntu-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: android-${{ matrix.profile }}-release
                  path: android/app/build/outputs/apk/release/app-release.apk
                  retention-days: 90

            - name: Upload iOS IPA
              if: matrix.os == 'macos-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: ios-${{ matrix.profile }}-release
                  path: ios/build/ipa/*.ipa
                  retention-days: 90

            # Deploy to app stores (only if manual dispatch with deploy=true, or if it's a tag push)
            - name: Deploy to Google Play Store
              if: |
                  matrix.os == 'ubuntu-latest' && 
                  (
                    (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true') ||
                    (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
                  )
              run: |
                  echo "üöÄ Deploying Android to Google Play Store for profile: ${{ matrix.profile }}"

                  # Install Fastlane
                  sudo gem install fastlane

                  # Run Fastlane deployment
                  cd android
                  fastlane deploy_playstore profile:${{ matrix.profile }}

            - name: Deploy to App Store
              if: |
                  matrix.os == 'macos-latest' && 
                  (
                    (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true') ||
                    (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
                  )
              run: |
                  echo "üöÄ Deploying iOS to App Store for profile: ${{ matrix.profile }}"

                  # Install Fastlane
                  sudo gem install fastlane

                  # Run Fastlane deployment
                  cd ios
                  fastlane deploy_appstore profile:${{ matrix.profile }}

    # Notification job
    notify-completion:
        needs: [prepare-matrix, build-and-deploy]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Notify build completion
              uses: tsickert/discord-webhook@v5.3.0
              with:
                  webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
                  username: Fleetbase
                  content: |
                      Navigator App Published for $PROFILE
